# Generated by Django 4.1.7 on 2023-09-11 12:23

from django.db import migrations, models


def transform_project_structure(sessions):
    # convert project level to engagement level project structure
    # argument
    # sessions - array of objects where object has price, no. of sessions, session type, session durations
    # returns:
    # sessions - array of objects where object has - session type, session name (session type + n (numbered)) , session duration, status (pending)
    session_counts = {}
    transformed_sessions = []
    billable_session_number = 0

    for session in sessions:
        session_type = session["session_type"]
        session_duration = session["session_duration"]
        is_billable = session["billable"]
        if session_type not in session_counts:
            session_counts[session_type] = 1

        for i in range(session["no_of_sessions"]):
            session_name = f"{session_type}_{session_counts[session_type]}"
            if is_billable:
                billable_session_number = billable_session_number + 1

            transformed_session = {
                "session_name": session_name,
                "session_number": session_counts[session_type],
                "session_type": session_type,
                "session_duration": session_duration,
                "billable_session_number": billable_session_number
                if is_billable
                else None,
                "status": "pending",
            }
            transformed_sessions.append(transformed_session)
            session_counts[session_type] += 1

    return transformed_sessions


def find_item_in_transformed_structure(
    transformed_project_structure, session_number, session_type
):
    for item in transformed_project_structure:
        # Check if the item matches the session_number and session_type
        if (
            item.get("session_number") == session_number
            and item.get("session_type") == session_type
        ):
            return item  # Return the matching item
    # If no matching item is found, return None
    return None


# add billable session number to sessions of existing projects
def add_billable_session_number_to_sessions(apps, schema_editor):
    # Step 1: Get all engagements
    Engagement = apps.get_model("api", "Engagement")
    SessionRequestCaas = apps.get_model("api", "SessionRequestCaas")
    engagements = Engagement.objects.all()
    for engagement in engagements:
        # Step 2a: Transform the project structure
        transformed_project_structure = transform_project_structure(
            engagement.project.project_structure
        )
        # Step 2b: Filter sessions based on learner and project
        learner_sessions_in_project = SessionRequestCaas.objects.filter(
            learner=engagement.learner, project=engagement.project
        )
        for session in learner_sessions_in_project:
            # Step 2d: Find the corresponding item in the transformed project structure
            found_item = find_item_in_transformed_structure(
                transformed_project_structure,
                session.session_number,
                session.session_type,
            )
            if found_item is not None:
                # Step 2e: Set the billable_session_number of the session
                session.billable_session_number = found_item["billable_session_number"]
                # Step 2f: Save the session
                session.save()


class Migration(migrations.Migration):
    dependencies = [
        ("api", "0010_alter_project_location"),
    ]

    operations = [
        migrations.AddField(
            model_name="sessionrequestcaas",
            name="billable_session_number",
            field=models.IntegerField(blank=True, default=None, null=True),
        ),
        migrations.AddField(
            model_name="sessionrequestcaas",
            name="status_updated_at",
            field=models.DateTimeField(blank=True, default=None, null=True),
        ),
        migrations.RunPython(add_billable_session_number_to_sessions),
    ]
