# Generated by Django 4.1.7 on 2023-12-16 10:07


from django.db import migrations, models
from courses.views import create_learner
from django.utils import timezone


def update_schedularbatch_participants(apps, schema_editor):
    try:
        SchedularBatch = apps.get_model("schedularApi", "SchedularBatch")
        Learner = apps.get_model("api", "Learner")
        Role = apps.get_model("api", "Role")
        User = apps.get_model("auth", "User")
        CourseEnrollment = apps.get_model("courses", "CourseEnrollment")
        Course = apps.get_model("courses", "Course")

        # Iterate through existing SchedularBatch instances
        for batch in SchedularBatch.objects.all():
            learners = []
            not_enrolled_learner_emails = []
            for participant in batch.participants.all():
                try:
                    # check if the same email user exists or not
                    user = User.objects.filter(username=participant.email).first()
                    if user:
                        if user.profile.roles.all().filter(name="learner").exists():
                            learner = Learner.objects.get(user=user.profile)
                            learners.append(learner)
                        else:
                            learner_role, created = Role.objects.get_or_create(
                                name="learner"
                            )
                            learner_profile = user.profile
                            learner_profile.roles.add(learner_role)
                            learner_role.save()
                            learner, created = Learner.objects.get_or_create(
                                user=learner_profile,
                                defaults={
                                    "name": participant.name,
                                    "email": participant.email,
                                    "phone": participant.phone,
                                },
                            )
                            learners.append(learner)
                    else:
                        learner = create_learner(
                            participant.name, participant.email, participant.phone
                        )
                        if learner:
                            learners.append(learner)
                        else:
                            not_enrolled_learner_emails.append(participant.email)
                except Exception as e:
                    # Handle specific exceptions or log the error
                    print(f"Error processing participant: {str(e)}")

            try:
                # Replace SchedularParticipants with Learner in participants field
                batch.participants.clear()
                learner_ids = [learner.id for learner in learners]
                batch.learners.add(*learner_ids)
                # Use batch.course directly if applicable
                course = Course.objects.filter(batch=batch).first()
                if course:
                    for learner in batch.learners.all():
                        course_enrollments = CourseEnrollment.objects.filter(
                            learner=learner, course=course
                        )
                        if not course_enrollments.exists():
                            datetime = timezone.now()
                            CourseEnrollment.objects.create(
                                learner=learner,
                                course=course,
                                enrollment_date=datetime,
                            )
            except Exception as e:
                # Handle specific exceptions or log the error
                print(f"Error updating batch: {str(e)}")

    except Exception as e:
        # Handle specific exceptions or log the error
        print(f"Error updating schedular batches: {str(e)}")


class Migration(migrations.Migration):
    dependencies = [
        ("api", "0035_trim_emails"),
        ("schedularApi", "0004_coachingsession_session_type_and_more"),
    ]

    operations = [
        migrations.AddField(
            model_name="schedularbatch",
            name="learners",
            field=models.ManyToManyField(blank=True, to="api.learner"),
        ),
        migrations.RunPython(update_schedularbatch_participants),
        migrations.RemoveField(
            model_name="schedularbatch",
            name="participants",
        ),
    ]
